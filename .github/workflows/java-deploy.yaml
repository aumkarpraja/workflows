name: Java - Deploy

on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
      service_path:
        type: string
        required: false
        description: Path of application if a monorepo is in use (used for infrastructure)
        default: '.'
      service:
        type: string
        required: true
        description: Name of the service in Kubernetes (i.e sso)
      package_name:
        type: string
        required: true
        description: Full path used by ECR to maintain image (i.e common/sso)
      java_distribution:
        type: string
        required: true
      java_version:
        type: string
        required: true
    secrets:
      AWS_ACCESS_KEY_DEVELOPMENT:
        required: true
      AWS_SECRET_ACCESS_KEY_DEVELOPMENT:
        required: true      
      
jobs:
  build-deploy:
    runs-on: ubuntu-latest
    env:
      MVN_DEFAULT: mvn --settings settings.xml --projects ${{ inputs.service }} --also-make
      DOCKER_CLI_EXPERIMENTAL: enabled

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up JDK
        if: inputs.java_version != '10'
        uses: actions/setup-java@v1
        with:
          java-version: '10' 
          java-package: jdk
          architecture: x64 

      - name: Set up JDK 10
        if: inputs.java_version == '10'
        uses: oracle-actions/setup-java@v1
        with:
          website: jdk.java.net
          release: 10

      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: /home/runner/.m2/repository
          key: ${{ runner.os }}-maven-${{ inputs.java_version }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-${{ inputs.java_version }}
          
      - name: Code Style
        run: |
          ${{ env.MVN_DEFAULT }} clean compile -U
      
      - name: Unit Test
        run: |
          ${{ env.MVN_DEFAULT }} test --fail-at-end

      - name: Package
        run: |
          ${{ env.MVN_DEFAULT }} clean package -U -DskipTests

      - name: Configure ECR AWS credentials (dev)
        uses: aws-actions/configure-aws-credentials@v1
        with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_DEVELOPMENT }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEVELOPMENT }}
            aws-region: ca-central-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Generate short-sha tag
        run: echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Generate env vars
        run: |
          echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`" >> $GITHUB_ENV
          echo "GIT_REF=`echo ${GITHUB_REF##*/}`" >> $GITHUB_ENV

      - name: Build and push
        id: docker_build
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ inputs.package_name }}
        uses: docker/build-push-action@v2
        with:
          context: ./${{ inputs.service_path }}
          file: ./${{ inputs.service_path }}/Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.GIT_REF }}-${{ env.SHORT_SHA }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      
      - name: Kubernetes resource setup
        env:
          ECR_IMAGE: ${{ steps.login-ecr.outputs.registry }}/${{ inputs.package_name }}:${{ env.GIT_REF }}-${{ env.SHORT_SHA }}
        run: |
          cd ${{ inputs.service_path }}/infrastructure/kubernetes/${{ inputs.environment }}
          sed -i "s|image:.*|image: $ECR_IMAGE|" ${{ inputs.service }}.yaml
      
      - name: Commit files
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git commit -am "Bump image tag #${{ github.event.pull_request.number}}"

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
      
